% This function exports the boundary conditions and volume mesh from 
% Pointwise to OpenFOAM format. 
%       Original author : Gabriel Buendia
%       Editor          : John Watchorn
%       Version         : 2
% Inputs:
%      ID_CN            -> Input IDs of connectors forming the wall boundary
%      path             -> String that specifies where the mesh is exported to
% Outputs:
%      exportCommand    -> String containing the command to export to
%                          OpenFOAM format
function exportCommand = pwExportOPF2D(ID_CN,path)

    connectorString = append('[list');
    for i = 1:length(ID_CN)
        if i < length(ID_CN)
            connectorString = append(connectorString,' [list $_DM(1) $_CN(',num2str(ID_CN(i)),')]');
        else
            connectorString = append(connectorString,' [list $_DM(1) $_CN(',num2str(ID_CN(i)),')]]');
        end
    end
    
    exportCommand = append(['pw::Application setCAESolver OpenFOAM 2\n'...
        'pw::Application markUndoLevel {Select Solver}\n'...
        '\n'...
        'pw::Application setCAESolver OpenFOAM 2\n'...
        'pw::Application markUndoLevel {Set Dimension 2D}\n'...
        '\n'...
        'pw::Application setCAESolverAttribute CellExport SetsAndZones\n'...
        'pw::Application setCAESolverAttribute FaceExport SetsAndZones\n'...
        'pw::Application setCAESolverAttribute PointPrecision 16\n'...
        'pw::Application setCAESolverAttribute SideBCExport Single\n'...
        'pw::Application setCAESolverAttribute Thickness 1\n'...
        'pw::Application markUndoLevel {Set Solver Attributes}\n'...
        '\n'...
        'set _TMP(PW_1) [pw::BoundaryCondition create]\n'...
        'pw::Application markUndoLevel {Create BC}\n'...
        '\n'...
        'unset _TMP(PW_1)\n'...
        'set _TMP(PW_1) [pw::BoundaryCondition getByName bc-2]\n'...
        '$_TMP(PW_1) setName airfoil\n'...
        'pw::Application markUndoLevel {Name BC}\n'...
        '\n'...
        '$_TMP(PW_1) setPhysicalType -usage CAE wall\n'...
        'pw::Application markUndoLevel {Change BC Type}\n'...
        '\n'...
        'set _DM(1) [pw::GridEntity getByName dom-1]\n'...
        '$_TMP(PW_1) apply ',connectorString,'\n'...
        'pw::Application markUndoLevel {Set BC}\n'...
        '\n'...
        'set _TMP(PW_2) [pw::BoundaryCondition create]\n'...
        'pw::Application markUndoLevel {Create BC}\n'...
        '\n'...
        'unset _TMP(PW_2)\n'...
        'set _CN(',num2str(ID_CN(end)+1),') [pw::GridEntity getByName con-',num2str(length(ID_CN)+2),']\n'...
        'set _TMP(PW_2) [pw::BoundaryCondition getByName bc-3]\n'...
        '$_TMP(PW_2) apply [list [list $_DM(1) $_CN(',num2str(ID_CN(end)+1),')]]\n'...
        'pw::Application markUndoLevel {Set BC}\n'...
        '\n'...
        '$_TMP(PW_2) setName farfield\n'...
        'pw::Application markUndoLevel {Name BC}\n'...
        '\n'...
        '$_TMP(PW_2) setPhysicalType -usage CAE patch\n'...
        'pw::Application markUndoLevel {Change BC Type}\n'...
        '\n'...
        'unset _TMP(PW_1)\n'...
        'unset _TMP(PW_2)\n'...
        'set _TMP(PW_1) [pw::VolumeCondition create]\n'...
        'pw::Application markUndoLevel {Create VC}\n'...
        '\n'...
        '$_TMP(PW_1) apply [list $_DM(1)]\n'...
        'pw::Application markUndoLevel {Set VC}\n'...
        '\n'...
        '$_TMP(PW_1) setName fluid\n'...
        'pw::Application markUndoLevel {Name VC}\n'...
        '\n'...
        '$_TMP(PW_1) setPhysicalType volumeToCell\n'...
        'pw::Application markUndoLevel {Change VC Type}\n'...
        '\n'...
        'unset _TMP(PW_1)\n'...
        'set _TMP(mode_1) [pw::Application begin CaeExport [pw::Entity sort [list $_DM(1)]]]\n'...
        '  $_TMP(mode_1) initialize -strict -type CAE ',path,'\n'...
        '  $_TMP(mode_1) verify\n'...
        '  $_TMP(mode_1) write\n'...
        '$_TMP(mode_1) end\n'...
        'unset _TMP(mode_1)\n']);
end
